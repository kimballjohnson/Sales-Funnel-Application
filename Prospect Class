from datetime import datetime

class prospect:
    def __init__(self, first, last, phone, email, type):
        self.first = first
        self.last = last
        self.phone = phone
        self.email = email
        self.type = type # My company solicits commercial and residential customers, so this differentiates those types.
        self.c = {} # Record of attempted contacts with the prospect and the result.

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def call(self, call_time, result):
        call = datetime.strptime(call_time, "%Y-%m-%d")
        self.c.update( {call : result} )

pd.DataFrame(d.items())
x = pd.DataFrame(d.items(), columns=['Date', 'DateValue'])
plt.scatter(x.Date, x.DateValue)
plt.show()
# This code block creates a way of converting the class dictionary object into a Pandas DataFrame for analysis.  THis can be vastly expanded.
# I can derive a massive amount of insight from this point, the harder part is acquiring and storing data, and learning SQLAlchemy to easily work with it.


# Ideas:
#   Figure out how to store your data locally and have the class methods play nice with reading and writing externally
#       This is resolved by incorporating an SQLAlchemy framework into an SQL database and using Object Reference Mapping to dynamically interact between Python and the database
#   Develop resolution of commercial customer correlations to industry/sector
#   Set alerts for prospects who need follow-up
#   Find way to integrate reports from company database to make activity tracking easier
#   Develop API to send and recieve data updates easily
#   Create checks on data to alert if data is corrupted or provider changed data format, requiring update, like unit testing or data validation
